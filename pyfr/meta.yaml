package:
  name: pyfr
  version: "v1.4.0"

source:
  #fn: pydicom-0.9.9.tar.gz
  #url: https://pypi.python.org/packages/source/p/pydicom/pydicom-0.9.9.tar.gz
  #md5: a66ca6728e69ba565ab9c8a21740eee8
  git_url: https://github.com/vincentlab/PyFR.git
  #git_rev: master
  git_tag: v1.4.0
  
# patches:
   # List any patch files here
   # - fix.patch


build:
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - pydicom = pydicom:main
    #
    # Would create an entry point called pydicom that calls pydicom.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
   number: 0

requirements:
  build:
    - python >=3.3
    - setuptools
    - gcc >=4.7 
    - pytools >=2014.3
    - pycuda >=2011.2
    - pyopencl >=2015.2.4
    - mpi4py >=1.3
    - h5py

  run:
    - python >=3.3
    - h5py >=2.4
    - mako >=1.0.0
    - mpi4py >=1.3
    - numpy >=1.8
    - pytools >=2014.3
    - pyopencl >=2015.2.4
    - pycuda >=2011.2
    - libgcc
    - metis >=5.0
    - cgns >=3.3
    
    #- pymic >=0.7

test:
  # Python imports
  imports:
    - pyfr.backends
    - pyfr.backends.base
    - pyfr.backends.cuda
    - pyfr.backends.cuda.kernels
    - pyfr.backends.mic
    - pyfr.backends.mic.kernels
    - pyfr.backends.opencl
    - pyfr.backends.opencl.kernels
    - pyfr.backends.openmp
    - pyfr.backends.openmp.kernels
    - pyfr.integrators
    - pyfr.plugins
    - pyfr.quadrules
    - pyfr.readers
    - pyfr.partitioners
    - pyfr.scripts
    - pyfr.solvers
    - pyfr.solvers.base
    - pyfr.solvers.baseadvec
    - pyfr.solvers.baseadvec.kernels
    - pyfr.solvers.baseadvecdiff
    - pyfr.solvers.baseadvecdiff.kernels
    - pyfr.solvers.euler
    - pyfr.solvers.euler.kernels
    - pyfr.solvers.euler.kernels.bcs
    - pyfr.solvers.euler.kernels.rsolvers
    - pyfr.solvers.navstokes
    - pyfr.solvers.navstokes.kernels
    - pyfr.solvers.navstokes.kernels.bcs
    - pyfr.writers

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    #- fabric

about:
  home: http://www.pyfr.org/
  license: BSD License
  summary: 'Flux Reconstruction in Python'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
